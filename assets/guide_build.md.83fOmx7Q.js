import{_ as s,o as a,c as n,R as l,a4 as p,a5 as e,a6 as o}from"./chunks/framework.4QdTlAKM.js";const A=JSON.parse('{"title":"编译原理","description":"","frontmatter":{},"headers":[],"relativePath":"guide/build.md","filePath":"guide/build.md","lastUpdated":1700153561000}'),r={name:"guide/build.md"},c=l(`<h1 id="编译原理" tabindex="-1">编译原理 <a class="header-anchor" href="#编译原理" aria-label="Permalink to &quot;编译原理&quot;">​</a></h1><h2 id="babel-简介" tabindex="-1">Babel 简介 <a class="header-anchor" href="#babel-简介" aria-label="Permalink to &quot;Babel 简介&quot;">​</a></h2><p>Babel 是 JavaScript 编译器(来自官网描述)。它将高版本 ECMAScript 语法编译为浏览器都支持的 ES5 语法。</p><p>Babel 毫无疑问是目前前端极其重要的基础设施之一了，在介绍 Babel 之前，我们简要梳理下 JavaScript 发展史。</p><h3 id="javascript-发展简史" tabindex="-1">JavaScript 发展简史 <a class="header-anchor" href="#javascript-发展简史" aria-label="Permalink to &quot;JavaScript 发展简史&quot;">​</a></h3><ul><li>1990 年底，万维网（WWW）诞生，可以在命令行查看网页。但通过命令行看网页，也是不太方便的。</li><li>1992 年底，美国国家超级电脑应用中心（NCSA）开始开发一个独立的浏览器，叫做 Mosaic。这是人类历史上第一个浏览器，从此网页可以在图形界面的窗口浏览。</li><li>1994 年 10 月，Mosaic 通信公司成立，不久后改名为 Netscape，其主要开发面向普通用户的新一代浏览器 Netscape Navigator。</li><li>1994 年 12 月，Netscape Navigator 发布了 1.0 版。该版本很受欢迎，但缺乏一种脚本语言，用于控制浏览器的行为。</li><li>1995 年，程序员 Brendan Eich 受雇于 Netscape 公司，只用了 10 天就开发出 JavaScript 1.0 版本，当时命名为 Mocha，1995 年 9 月改名为 LiveScript。</li><li>1995 年 12 月，Netscape 公司与 Sun 公司（Java语言的发明者和所有者）达成协议，后者允许将 LiveScript 叫做 JavaScript。对于两个公司而言都有益处：NetScape 公司可以借助 Java 的声势，而 Sun 公司则将自己的影响力扩展到了浏览器。</li><li>1996 年 3 月，Navigator 2.0 浏览器正式内置了 JavaScript 脚本语言。</li><li>1996 年 8 月，微软模仿 JavaScript 开发了一种相近的语言，取名为 JScript，首先内置于 IE3.0。</li><li>1996 年 11 月，Netscape 公司决定将 JavaScript 提交给国际标准化组织 ECMA（European Computer Manufacturers Association），希望 JavaScript 能够成为国际标准，以此抵抗微软。</li><li>1997 年 7 月，ECMAScript 1.0 版发布。ECMA 组织发布 262 号标准文件（ECMA-262）的第一版，规定了浏览器脚本语言的标准，并将这种语言称为 ECMAScript。由于 ECMA 的开放和中立性，ECMAScript 和 JavaScript 的关系是，前者是后者的规格，后者是前者的实现。ECMA-262 标准后来也被另一个国际标准化组织 ISO（International Organization for Standardization）批准，标准号是 ISO-16262。</li><li>1998 年 6 月，ECMAScript 2.0 版发布。</li><li>1999 年 12 月，ECMAScript 3.0 版发布，成为 JavaScript 的通行标准，得到了广泛支持。</li><li>2007 年 10 月，ECMAScript 4.0 版草案发布，但该版本过于激进，分歧很大。</li><li>2008 年，Google 公司为 Chrome 浏览器而开发的 V8 编译器诞生。</li><li>2009 年，Node.js 诞生。Node.js 的出现促进了前端工程化的快速发展，前端由石器时代快速进入了工业时代。</li><li>2009 年 12 月，ECMAScript 5.0 版正式发布。截止 2012 年底，已得到绝大部分浏览器支持。</li><li>2010 年，NPM、BackboneJS 和 RequireJS 的出现，标志着 JavaScript 进入模块化开发时代。</li><li>2013 年 5 月，Facebook 发布 UI 框架库 React，引入了新的 JSX 语法，使得 UI 层可以用组件开发。</li><li>2015 年 6 月，ECMAScript 6.0 版正式发布，并更名为: ECMAScript 2015 标准。</li><li>2016 年 6 月，ECMAScript 2016 标准发布。</li><li>2017 年 6 月，ECMAScript 2017 标准发布，正式引入了 async 函数，使得异步操作的写法出现了根本的变化。</li></ul><p>ECMAScript 标准目前保持每年一次发布的速度更新，相应的，部分浏览器对标准的支持会显得有些滞后。</p><p>于是，基于对高版本语法转译为低版本语法的各种工具被开发了出来。</p><p>下一步，我们来了解下 JavaScript 引擎。</p><h2 id="javascript-引擎" tabindex="-1">JavaScript 引擎 <a class="header-anchor" href="#javascript-引擎" aria-label="Permalink to &quot;JavaScript 引擎&quot;">​</a></h2><p>JavaScript 引擎是一个专门处理 JavaScript 脚本的虚拟机，负责解析 Javascript 语言。</p><blockquote><p>对于浏览器而言，其内核包括：渲染引擎(layout engineer 或者 Rendering Engine)、JavaScript 引擎等。 渲染引擎负责取得网页的内容（HTML、XML、图像等等）、整理讯息（例如加入 CSS 等），以及计算网页的显示方式，然后会输出至显示器或打印机。 浏览器的内核的不同对于网页的语法解释会有不同，所以渲染的效果也不相同。所有网页浏览器、电子邮件客户端以及其它需要编辑、显示网络内容的应用程序都需要内核。</p></blockquote><p>下面是一些 JavaScript 引擎：</p><ul><li>SpiderMonkey，第一款 JavaScript 引擎，早期用于 Netscape Navigator，现时用于 Mozilla Firefox。</li><li>V8，开放源代码，由 Google 开发，是 Google Chrome 的一部分。</li><li>JavaScriptCore，开放源代码，用于 Safari。</li><li>Chakra (JScript 引擎)，用于 Internet Explorer。</li><li>Chakra (JavaScript 引擎)，用于 Microsoft Edge。</li></ul><h3 id="babel" tabindex="-1">Babel <a class="header-anchor" href="#babel" aria-label="Permalink to &quot;Babel&quot;">​</a></h3><p>在了解了 JavaScript 及其引擎的各项背景后，我们来了解下 Babel。</p><p>Babel 是 JavaScript 编译器(来自官网描述)。它将高版本 ECMAScript 语法编译为浏览器都支持的 ES5 语法。</p><p>开发者编写的 JavaScript 代码，与浏览器等容器内运行的 JavaScript 通常是不同的，比如为了兼容低版本浏览器，需要将编写时代码转译为运行时代码。 举例：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 这种语法，在 IE7 等低版本浏览器中是无法识别的，会报语法错误</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">b</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> b;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 经过 Babel 及其插件编译为 ES5 后，IE7 等浏览器可以识别下面的代码</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">b</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> b;</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 这种语法，在 IE7 等低版本浏览器中是无法识别的，会报语法错误</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fn</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">a</span><span style="color:#24292E;">, </span><span style="color:#E36209;">b</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> b;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 经过 Babel 及其插件编译为 ES5 后，IE7 等浏览器可以识别下面的代码</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fn</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">a</span><span style="color:#24292E;">, </span><span style="color:#E36209;">b</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> b;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="babel-发展史" tabindex="-1">Babel 发展史 <a class="header-anchor" href="#babel-发展史" aria-label="Permalink to &quot;Babel 发展史&quot;">​</a></h3><ul><li>2014 年，Facebook 的澳大利亚的工程师 Sebastian McKenzie 发布了 6to5 这个库，用于将 ES6 转为 ES5，它使用的 AST 转换引擎 fork 自 acorn。</li><li>2015 年 2 月 15 日，6to5 和 Esnext 的团队决定一起开发 6to5，并改名为 Babel，解析引擎改为 Babylon。后来，Babylon 移入到 @babel/parser。</li><li>2015-03-31，Babel 5.0 发布。</li><li>2015-10-30，Babel 6.0 发布。</li><li>Babel 自 6.0 起，就不再对代码进行修改。从这个版本开始，Babel 主要负责 Parse 和 Generate 流程，修改代码的 transform 过程全都交给插件去做。也就是说，Babel 只是一个语法解析器。</li><li>2018-08-27，Babel 7.0 发布。</li></ul><h2 id="babel-编译原理" tabindex="-1">Babel 编译原理 <a class="header-anchor" href="#babel-编译原理" aria-label="Permalink to &quot;Babel 编译原理&quot;">​</a></h2><p>Babel 本质上就是一个编译器，将一份代码编译为另一份代码。</p><p>Babel 的编译流程和大部分编译器的编译流程是相似的，包括三个过程：</p><ul><li>第一阶段：解析（ Parsing ）</li></ul><p>解析 是将最初原始的代码转换为一种更加抽象的表示（ AST ）。</p><p>它包括：词法解析（ Lexical Analysis ）和语法解析（ Syntactic Analysis ）。</p><ul><li>第二阶段：转换（ Transormation ）</li></ul><p>转换阶段会对 AST 进行遍历，在这个过程中对节点进行增删改查。</p><ul><li>第三阶段：重新生成代码（ Code Generation ）</li></ul><p>编译器有很多种，我们先不考虑其他类型的编译器，先详细了解下 Babel 的整个编译过程。</p><p>编译过程如下图：</p><p><img src="`+p+'" alt=""></p><p>Babel 在编译过程用到了一些工具集，如下图：</p><p><img src="'+e+`" alt=""></p><p>本章，我们从最简单的案例入手理解编译原理，不去深究 Babel 各个模块的源码。</p><h3 id="解析" tabindex="-1">解析 <a class="header-anchor" href="#解析" aria-label="Permalink to &quot;解析&quot;">​</a></h3><p>解析 是将最初原始的代码转换为一种更加抽象的表示（ AST ）。</p><p>包括：词法解析（ Lexical Analysis ）和语法解析（ Syntactic Analysis ）。</p><ul><li>词法解析（ Lexical Analysis ）</li></ul><p>词法解析器( Tokenizer ) 在这个阶段将字符串形式的代码转换为 Tokens (令牌)，这个过程由词法解析器（ Tokenizer 或 Lexer ）完成。</p><p>令牌（ Tokens ）是扁平化的语法片段数组，每个数组项包含了：代码片段（ value ）、代码位置（ start / end ）、类型（ type ） 等信息，这些信息有助于后续的语法分析。</p><p>如 n*n 经过词法解析后，转换成的令牌如下：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// n*n</span></span>
<span class="line"><span style="color:#E1E4E8;">[</span></span>
<span class="line"><span style="color:#E1E4E8;">{ type: { </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;"> }, value: </span><span style="color:#9ECBFF;">&quot;n&quot;</span><span style="color:#E1E4E8;">, start: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, end: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, loc: { </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;"> } },</span></span>
<span class="line"><span style="color:#E1E4E8;">{ type: { </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;"> }, value: </span><span style="color:#9ECBFF;">&quot;*&quot;</span><span style="color:#E1E4E8;">, start: </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, end: </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, loc: { </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;"> } },</span></span>
<span class="line"><span style="color:#E1E4E8;">{ type: { </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;"> }, value: </span><span style="color:#9ECBFF;">&quot;n&quot;</span><span style="color:#E1E4E8;">, start: </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, end: </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">, loc: { </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;"> } },</span></span>
<span class="line"><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// n*n</span></span>
<span class="line"><span style="color:#24292E;">[</span></span>
<span class="line"><span style="color:#24292E;">{ type: { </span><span style="color:#D73A49;">...</span><span style="color:#24292E;"> }, value: </span><span style="color:#032F62;">&quot;n&quot;</span><span style="color:#24292E;">, start: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, end: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, loc: { </span><span style="color:#D73A49;">...</span><span style="color:#24292E;"> } },</span></span>
<span class="line"><span style="color:#24292E;">{ type: { </span><span style="color:#D73A49;">...</span><span style="color:#24292E;"> }, value: </span><span style="color:#032F62;">&quot;*&quot;</span><span style="color:#24292E;">, start: </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, end: </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, loc: { </span><span style="color:#D73A49;">...</span><span style="color:#24292E;"> } },</span></span>
<span class="line"><span style="color:#24292E;">{ type: { </span><span style="color:#D73A49;">...</span><span style="color:#24292E;"> }, value: </span><span style="color:#032F62;">&quot;n&quot;</span><span style="color:#24292E;">, start: </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, end: </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, loc: { </span><span style="color:#D73A49;">...</span><span style="color:#24292E;"> } },</span></span>
<span class="line"><span style="color:#D73A49;">...</span></span>
<span class="line"><span style="color:#24292E;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>每一个 type 有一组属性来描述该令牌：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">label</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;name&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">keyword</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">beforeExpr</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">startsExpr</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">rightAssociative</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">isLoop</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">isAssign</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">prefix</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">postfix</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">binop</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">updateContext</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">   </span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">type</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">label</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;name&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">keyword</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">beforeExpr</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">startsExpr</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">rightAssociative</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">isLoop</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">isAssign</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">prefix</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">postfix</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">binop</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">updateContext</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">   </span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>词法解析器（ Tokenizer ）本质上就是一个字符串处理方法，入参是字符串，返回结果是数组。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Tokenizer</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">tokens</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 字符串解析，并将结果</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// processing</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 返回 Token 数组</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> tokens;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Tokenizer</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">tokens</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 字符串解析，并将结果</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// processing</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 返回 Token 数组</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> tokens;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><ul><li>语法解析（ Syntactic Analysis ）</li></ul><p>语法解析器( Parser ) 会把 Tokens 转换为抽象语法树（ Abstract Syntax Tree, AST ）。</p><p>AST 就是 JavaScript 中的一个 Object Tree，用于表示代码的语法结构。</p><p>举个例子：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">a</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">b</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(a </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> b);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">a</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">b</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(a </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> b);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>会被解析为：</p><p><img src="`+o+`" alt=""></p><p>其中，Program、VariableDeclarator、CallExpression 等表示节点类型，每个节点都是一个语法单元。</p><p>节点类型的属性描述了节点的详细信息。</p><p>JavaScript 中的节点类型非常多，再加上 JSX、Flow 等，我们不需要记忆它们，在需要的时候，ASTExplorer（ <a href="https://astexplorer.net/" target="_blank" rel="noreferrer">https://astexplorer.net/</a> ）可以帮助我们快速查看代码的 AST。</p><p>很显然，语法解析器接收 Token 数组，转为 AST，本质上是一个转换方法：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">parser</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">tokens</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ast</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        type: </span><span style="color:#9ECBFF;">&#39;Program&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        body: []</span></span>
<span class="line"><span style="color:#E1E4E8;">    };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// tokens to ast</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// processing</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ast;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">parser</span><span style="color:#24292E;">(</span><span style="color:#E36209;">tokens</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ast</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        type: </span><span style="color:#032F62;">&#39;Program&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        body: []</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// tokens to ast</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// processing</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ast;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="转换-transformation" tabindex="-1">转换（ Transformation ） <a class="header-anchor" href="#转换-transformation" aria-label="Permalink to &quot;转换（ Transformation ）&quot;">​</a></h3><p>这个过程 Babel 会对 AST 进行遍历，并且进行增删改查等转换动作。</p><p>Babel 所有插件都是在这个阶段工作, 比如语法转换、代码压缩等。</p><p>由于 AST 有众多类型的节点，在遍历 AST 过程中，需要用到 深度遍历 和 Visitor。</p><p>深度遍历，就是递归遍历 AST 对象；</p><p>Visitor，也就是访问者模式，它是一个对象，其 key 即为各个节点类型，值为各个处理方法。</p><p>转换过程如下：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 转换器定义</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">traverse</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">ast</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">visitor</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 递归遍历</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// dfs(ast, visitor)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 转换器执行</span></span>
<span class="line"><span style="color:#B392F0;">traverse</span><span style="color:#E1E4E8;">(ast, {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Program</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">node</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">parent</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">CallExpression</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">node</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">parent</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">NumberLiteral</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">node</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">parent</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 转换器定义</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">traverse</span><span style="color:#24292E;">(</span><span style="color:#E36209;">ast</span><span style="color:#24292E;">, </span><span style="color:#E36209;">visitor</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 递归遍历</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// dfs(ast, visitor)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 转换器执行</span></span>
<span class="line"><span style="color:#6F42C1;">traverse</span><span style="color:#24292E;">(ast, {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Program</span><span style="color:#24292E;">(</span><span style="color:#E36209;">node</span><span style="color:#24292E;">, </span><span style="color:#E36209;">parent</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">CallExpression</span><span style="color:#24292E;">(</span><span style="color:#E36209;">node</span><span style="color:#24292E;">, </span><span style="color:#E36209;">parent</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">NumberLiteral</span><span style="color:#24292E;">(</span><span style="color:#E36209;">node</span><span style="color:#24292E;">, </span><span style="color:#E36209;">parent</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h3 id="重新生成代码-code-generation" tabindex="-1">重新生成代码（ Code Generation ） <a class="header-anchor" href="#重新生成代码-code-generation" aria-label="Permalink to &quot;重新生成代码（ Code Generation ）&quot;">​</a></h3><p>把 AST 转换回字符串形式的 Javascript，同时这个阶段还会生成 Source Map。</p><p>转换器接收一个 AST，并将其转为代码字符串。本质上是对象转字符串的方法。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">transformer</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">ast</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> code </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 遍历 AST，拼接 code 字符串</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> code;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">transformer</span><span style="color:#24292E;">(</span><span style="color:#E36209;">ast</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> code </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 遍历 AST，拼接 code 字符串</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> code;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>`,72),t=[c];function i(E,y,b,u,d,F){return a(),n("div",null,t)}const h=s(r,[["render",i]]);export{A as __pageData,h as default};
