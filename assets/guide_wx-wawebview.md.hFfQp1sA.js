import{_ as e,o as a,c as t,R as i,b7 as r}from"./chunks/framework.7yw_gwvA.js";const u=JSON.parse('{"title":"渲染层基础库WAWebview","description":"","frontmatter":{},"headers":[],"relativePath":"guide/wx-wawebview.md","filePath":"guide/wx-wawebview.md","lastUpdated":1699118902000}'),s={name:"guide/wx-wawebview.md"},o=i('<h1 id="渲染层基础库wawebview" tabindex="-1">渲染层基础库WAWebview <a class="header-anchor" href="#渲染层基础库wawebview" aria-label="Permalink to &quot;渲染层基础库WAWebview&quot;">​</a></h1><p>框架JS库，提供视图层基础的API能力，主要功能有将消息通信封装为JSBridge消息，日志组件Reporter封装，wx对象下部分渲染视图方面的Api,小程序组件实现和注册，VirtualDOM与diff和Render UI的实现，页面事件触发处理</p><h2 id="wawebview-js注入" tabindex="-1">WAWebview.js注入 <a class="header-anchor" href="#wawebview-js注入" aria-label="Permalink to &quot;WAWebview.js注入&quot;">​</a></h2><p>在小程序渲染层代码中我们找寻到了渲染层基础库的注入：</p><p><img src="'+r+'" alt=""></p><h2 id="模块分析" tabindex="-1">模块分析 <a class="header-anchor" href="#模块分析" aria-label="Permalink to &quot;模块分析&quot;">​</a></h2><p>首先我们进行WAWebview.js文件的解析。渲染层基础库代码大概有8万多行。那么我们怎么进行分析呢？</p><p>我这边使用了比较传统的方法，就是折叠法，折叠成代码块，然后进行分析。</p><h3 id="core-js模块" tabindex="-1">core-js模块 <a class="header-anchor" href="#core-js模块" aria-label="Permalink to &quot;core-js模块&quot;">​</a></h3><p>core-js负责初始化框架js代码，编译js，加载业务逻辑js等功能。</p>',10),w=[o];function c(d,n,_,l,p,h){return a(),t("div",null,w)}const v=e(s,[["render",c]]);export{u as __pageData,v as default};
