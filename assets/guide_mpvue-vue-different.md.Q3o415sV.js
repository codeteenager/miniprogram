import{_ as s,o as i,c as a,R as l}from"./chunks/framework.cA_q1tML.js";const c=JSON.parse('{"title":"mpvue与vue的不同","description":"","frontmatter":{},"headers":[],"relativePath":"guide/mpvue-vue-different.md","filePath":"guide/mpvue-vue-different.md","lastUpdated":1683294321000}'),n={name:"guide/mpvue-vue-different.md"},e=l(`<h1 id="mpvue与vue的不同" tabindex="-1">mpvue与vue的不同 <a class="header-anchor" href="#mpvue与vue的不同" aria-label="Permalink to &quot;mpvue与vue的不同&quot;">​</a></h1><h2 id="细数-mpvue-与微信小程序的不同" tabindex="-1">细数 mpvue 与微信小程序的不同 <a class="header-anchor" href="#细数-mpvue-与微信小程序的不同" aria-label="Permalink to &quot;细数 mpvue 与微信小程序的不同&quot;">​</a></h2><h3 id="模板语法" tabindex="-1">模板语法 <a class="header-anchor" href="#模板语法" aria-label="Permalink to &quot;模板语法&quot;">​</a></h3><p>模板绑定：</p><ul><li>mpvue 与微信小程序都采用 Mustache 语法进行状态绑定</li><li>mpvue 可以通过 v-bind 绑定状态，而微信小程序通过 Mustache 语法绑定状态</li></ul><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- mpvue --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;{{data}}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> :value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;value&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 微信小程序 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;{{data}}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{{value}}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>状态更新：</p><ul><li>mpvue 与 微信小程序状态更新方法不同，mpvue 直接通过 this.xxx 修改状态值，微信小程序通过 this.setData 更新状态</li><li>微信小程序通过 this.setData 传入第二个参数，实现状态更新后的回调</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// mpvue 更新状态</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;new state&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 微信小程序状态更新后回调函数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ... </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 微信小程序更新状态，状态更新后进行回调</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;new state&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, callback)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>过滤器：</p><ul><li>mpvue 不支持过滤器</li><li>微信小程序可以通过 wxs 实现类似过滤器功能</li></ul><p>需要注意 mpvue 或微信小程序都不支持直接在 wxml 中使用 methods，小程序中必须通过 wxs 实现。</p><h3 id="计算属性和监听器" tabindex="-1">计算属性和监听器 <a class="header-anchor" href="#计算属性和监听器" aria-label="Permalink to &quot;计算属性和监听器&quot;">​</a></h3><ul><li>mpvue 默认支持计算属性和监听器特性</li><li>微信小程序默认不支持计算属性和监听器，如需支持可以使用官方组件库 Computed，使用时有以下两点需要注意 <ul><li>Computed 库需要在 Component 组件中使用，在 Page 中不能生效</li><li>使用 computed 计算属性时，不支持通过 this.data 获取 data 对象，需要通过 computed 方法的第一个参数获取</li></ul></li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">computed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  sum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data.a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data.b</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li>微信小程序的监听器功能非常强大，支持同时监听多个元素，并支持监听对象的属性值和数组的某一个特定元素，而 mpvue 的监听器仅支持监听一个 data 中的状态。</li></ul><h3 id="style-和-class-绑定" tabindex="-1">style 和 class 绑定 <a class="header-anchor" href="#style-和-class-绑定" aria-label="Permalink to &quot;style 和 class 绑定&quot;">​</a></h3><ul><li>mpvue 通过 v-bind:style 和 v-bind:class 绑定 style 和 class 对象</li><li>微信小程序通过动态插入状态值修改 style 和 class 属性</li></ul><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- mpvue --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> :style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{fontSize: &#39;14px&#39;}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;mpvue&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> :class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;isError ? &#39;error&#39; : &#39;&#39;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;mpvue&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 微信小程序 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;font-size: {{fontSize}}px;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;mpvue&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{{isError ? &#39;error&#39; : &#39;&#39;}}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;mpvue&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="条件与列表渲染" tabindex="-1">条件与列表渲染 <a class="header-anchor" href="#条件与列表渲染" aria-label="Permalink to &quot;条件与列表渲染&quot;">​</a></h3><p>条件渲染：</p><ul><li>mpvue 实现条件渲染的方式有两种：v-if 和 v-show，两者的区别是 <ul><li>v-if 为 false 时 DOM 将不渲染</li><li>v-show 仅改变 css 属性 display 的值，为 false 时，值为 none</li><li>v-if 配套的指令有：v-else-if 和 v-else，与条件语句类似</li></ul></li><li>微信小程序实现条件渲染的方式有两种：wx-if 和 hidden，两者的区别是 <ul><li>wx-if 为 false 时 DOM 将不渲染</li><li>hidden 仅改变 css 属性 display 的值，为 true 时，值为 none</li><li>wx-if 配套的指令有：wx-elif 和 wx-else，与条件语句类似 列表渲染：</li></ul></li><li>mpvue 通过 v-for 和 v-bind:key 实现列表渲染</li><li>微信小程序通过 wx-for、wx-for-index、wx-for-item 和 wx-key 实现列表渲染</li><li>mpvue 和 微信小程序都能够支持数组、对象、字符串等数据结构的遍历</li></ul><h3 id="表单控件绑定" tabindex="-1">表单控件绑定 <a class="header-anchor" href="#表单控件绑定" aria-label="Permalink to &quot;表单控件绑定&quot;">​</a></h3><ul><li>mpvue 通过 v-model 实现表单组件的双向数据绑定</li><li>微信小程序通过基础组件 form 实现表单绑定</li></ul><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">form</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> bindsubmit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;register&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;form-item&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">text</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;form-item-label&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;用户名：&lt;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;form-item-value&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      placeholder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;请输入用户名&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;username&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">form</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>绑定的关键步骤如下：</p><ol><li>将表单控件写在 form 容器中，通过 name 属性绑定表单控件；</li><li>绑定 form 的 submit 方法，通过该方法中的 event.detail.value 获取表单对象值。</li></ol><ul><li>微信小程序官方为我们提供了 weui-miniprogram 组件库，其中包含 mp-form 和 mp-cell 组件，可以实现表单异常校验、错误提示、定制表单项等复杂功能，微信小程序和 mpvue 都可以使用，推荐大家使用这种方案来实现表单。</li></ul><h3 id="组件化" tabindex="-1">组件化 <a class="header-anchor" href="#组件化" aria-label="Permalink to &quot;组件化&quot;">​</a></h3><ul><li>mpvue 实现组件化的方案是使用微信小程序 wxml 的模板引用特性</li><li>wxml 模板引用包含 import 和 include 两种方案，import 是模板引用，需要手动传入 data 属性，而 include 是纯粹的代码集成。mpvue 选择 import 方案</li><li>微信小程序提供了功能更加强大的 Component 作为组件化解决方案，它包含了众多高级特性，如：relations、observers、behaviors、definitionFilter 等</li></ul><h3 id="异常处理" tabindex="-1">异常处理 <a class="header-anchor" href="#异常处理" aria-label="Permalink to &quot;异常处理&quot;">​</a></h3><ul><li>mpvue 通过 Vue.config.errorHandler 实现异常捕获</li><li>微信小程序通过 App 的 onError 方法或 wx.onError API 实现异常捕获</li><li>mpvue 的异常捕获仅仅针对 Vue 相关的方法、生命周期函数等，微信小程序的 onError 仅针对小程序 App、Page 和 Component 中触发的异常；</li><li>对于 mpvue 或 小程序之外的异常，我们仍然需要通过 try catch 进行捕获和处理</li></ul><h3 id="图表对比" tabindex="-1">图表对比 <a class="header-anchor" href="#图表对比" aria-label="Permalink to &quot;图表对比&quot;">​</a></h3><table><thead><tr><th>特性</th><th>mpvue</th><th>微信小程序</th></tr></thead><tbody><tr><td>模板绑定</td><td>DOM 中使用 Mustache 语法，属性中使用 v-bind 绑定</td><td>DOM 和属性中都使用 Mustache 语法绑定</td></tr><tr><td>状态更新</td><td>直接通过 this.xxx = xxx 进行更新</td><td>通过 this.setData() 方法进行更新</td></tr><tr><td>过滤器</td><td>不支持</td><td>通过 wxs 支持</td></tr><tr><td>计算属性和过滤器</td><td>支持，语法与 Vue 相同</td><td>通过第三方 Computed 组件库支持，必须在 Component 中使用</td></tr><tr><td>style 和 class 绑定</td><td>通过 v-bind 实现绑定</td><td>通过 Mustache 语法绑定</td></tr><tr><td>条件渲染</td><td>v-if 和 v-show 实现</td><td>wx-if 和 hidden 实现</td></tr><tr><td>列表渲染</td><td>v-for 和 v-bind:key 实现</td><td>wx-for、wx-for-index、wx-for-item 和 wx-key 实现</td></tr><tr><td>表单控件绑定</td><td>form 和 mp-form</td><td>form 和 mp-form</td></tr><tr><td>组件化</td><td>通过 mpvue 的组件语法</td><td>通过 Component 特性实现</td></tr><tr><td>异常处理</td><td>通过 Vue.config.errorHandler 自定义长</td><td>通过 App 的 onError 方法 或 wx.onError API 捕获异常</td></tr></tbody></table><h2 id="细数-mpvue-与-vue-的不同" tabindex="-1">细数 mpvue 与 Vue 的不同 <a class="header-anchor" href="#细数-mpvue-与-vue-的不同" aria-label="Permalink to &quot;细数 mpvue 与 Vue 的不同&quot;">​</a></h2><p>由于 mpvue 是 Vue 的分支，它基于 Vue 的源码进行修改，所以它不能完全支持 Vue 的特性，这是由于 mpvue 的实现原理限制的，下面逐一分析 mpvue 主要特性的实现原理，并与 Vue 特性进行对比。</p><h3 id="模板语法-1" tabindex="-1">模板语法 <a class="header-anchor" href="#模板语法-1" aria-label="Permalink to &quot;模板语法&quot;">​</a></h3><p>mpvue 的模板语法最终会编译为微信小程序的模板语法，所以对模板语法能够得到较好支持，但不支持在绑定状态时使用方法，这是和 Vue 的主要不同，以下代码在 Vue 上能够被支持：</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> :value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;wrapper(value)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>但是在 mpvue 中是不能够被支持的，与之对应的还有过滤器，mpvue 也不能支持：</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;{{ value | filterValue }}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>以上两点大家在 mpvue 开发过程中需要特别注意，因为这些在 Vue 中都是非常常用的技巧，但是在 mpvue 中都无法得到支持。</p><h3 id="计算属性和监听器-1" tabindex="-1">计算属性和监听器 <a class="header-anchor" href="#计算属性和监听器-1" aria-label="Permalink to &quot;计算属性和监听器&quot;">​</a></h3><p>mpvue 的计算属性和监听器有 Vue 实例进行维护，计算属性最终会被转化为 data 状态，所以能够实现响应式功能，这与微信小程序的 Computed 库实现原理类似，它与 Vue 非常接近，可以说是原汁原味地移植了 Vue 的特性。</p><h3 id="style-和-class-绑定-1" tabindex="-1">style 和 class 绑定 <a class="header-anchor" href="#style-和-class-绑定-1" aria-label="Permalink to &quot;style 和 class 绑定&quot;">​</a></h3><p>mpvue 的 style 和 class 绑定最终会转化为微信小程序的模板语法，因而不支持对象绑定，如下面这种特性：</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-bind:style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;[style1, style2]&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这是 Vue 中多样式对象绑定用法，在 mpvue 中是无不支持的。</p><h3 id="条件与列表渲染-1" tabindex="-1">条件与列表渲染 <a class="header-anchor" href="#条件与列表渲染-1" aria-label="Permalink to &quot;条件与列表渲染&quot;">​</a></h3><p>这部分 mpvue 较好地还原了 Vue 的特性，因为 mpvue 都能找到微信小程序中的对应实现，如:</p><ol><li>v-if 对应小程序的 wx-if 属性，v-else-if 对应 wx-elif，v-else 对应 wx-else；</li><li>v-show 对应小程序的 hidden 属性；</li><li>v-for 表达式对应小程序的 wx-for、wx-for-index、wx-for-item 三个属性。</li></ol><h3 id="表单控件绑定-1" tabindex="-1">表单控件绑定 <a class="header-anchor" href="#表单控件绑定-1" aria-label="Permalink to &quot;表单控件绑定&quot;">​</a></h3><p>mpvue 沿袭了 Vue 的 v-model 双向绑定指令，同时还能够直接使用微信小程序的扩展组件库 mp-form。</p><h3 id="组件化-1" tabindex="-1">组件化 <a class="header-anchor" href="#组件化-1" aria-label="Permalink to &quot;组件化&quot;">​</a></h3><p>组件化是 mpvue 中表现较弱的一个方面，它仅仅使用 wxml 的模板引用实现组件，导致微信小程序 Component 中的大量优秀特性无法使用，这主要考虑了 mpvue 的扩展性和兼容性，但由于微信小程序的 Component 设计较为领先，其他同类小程序平台缺少很多类似的特性，如果使用这些特性，将使得 mpvue 的多端小程序方案较难实现，所以 mpvue 使用了适用度最高的 wxml 模板引用作为组件实现方案。所以 Vue 中组件的异步组件、动态组件、transition 动画等等很多优秀的特性将无法使用。</p><h3 id="异常处理-1" tabindex="-1">异常处理 <a class="header-anchor" href="#异常处理-1" aria-label="Permalink to &quot;异常处理&quot;">​</a></h3><p>mpvue 使用了 Vue 的 errorHandler 来处理异常，这点和 Vue 的开发体验一致，我们可以非常方便使用这个特性来捕获和处理异常。</p>`,57),t=[e];function p(h,r,k,d,E,u){return i(),a("div",null,t)}const m=s(n,[["render",p]]);export{c as __pageData,m as default};
