import{_ as a,o as s,c as e,R as n,a7 as p,a8 as l,a9 as r,aa as t,ab as i}from"./chunks/framework.Btvl2Ezl.js";const k=JSON.parse('{"title":"设计思路与原理","description":"","frontmatter":{},"headers":[],"relativePath":"guide/mars2.md","filePath":"guide/mars2.md","lastUpdated":1700733506000}'),o={name:"guide/mars2.md"},c=n('<h1 id="设计思路与原理" tabindex="-1">设计思路与原理 <a class="header-anchor" href="#设计思路与原理" aria-label="Permalink to &quot;设计思路与原理&quot;">​</a></h1><h2 id="设计思路" tabindex="-1">设计思路 <a class="header-anchor" href="#设计思路" aria-label="Permalink to &quot;设计思路&quot;">​</a></h2><p>Mars 框架的设计思路是将跨多端的应用拆分为逻辑层和视图层，逻辑层采用同一套核心运行时进行数据驱动以及生命周期管理，视图层使用同一套模板语法，经过编译转换为特定平台的视图语言。</p><h2 id="框架原理" tabindex="-1">框架原理 <a class="header-anchor" href="#框架原理" aria-label="Permalink to &quot;框架原理&quot;">​</a></h2><p>考虑到学习成本、生态完善程度以及在多端上的扩展性、业务场景等原因，我们选择了 Vue 技术栈，采用 Vue 单文件组件和模板语法来书写组件代码，引入标准基础组件和 API 规范和标准生命周期规范。</p><p>在此开发规范之上，基于 Vue 的模板语法和基础组件来构建视图层，基于 Vue 数据驱动及标准生命周期规范来构建逻辑层，实现多端运行。框架总体原理图如下：</p><p><img src="'+p+'" alt=""></p><p>小程序运行时原理图：</p><p><img src="'+l+'" alt=""></p><p>编译和构建：</p><p><img src="'+r+'" alt=""></p><p>H5运行时原理图：</p><p><img src="'+t+`" alt=""></p><h2 id="代码结构" tabindex="-1">代码结构 <a class="header-anchor" href="#代码结构" aria-label="Permalink to &quot;代码结构&quot;">​</a></h2><p>Mars仓库地址为：<a href="https://github.com/max-team/Mars" target="_blank" rel="noreferrer">https://github.com/max-team/Mars</a>，其中代码结构如下：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">docs                // 文档目录</span></span>
<span class="line"><span style="color:#e1e4e8;">packsges</span></span>
<span class="line"><span style="color:#e1e4e8;">    |- mars-build   // 编译相关代码</span></span>
<span class="line"><span style="color:#e1e4e8;">    |- mars-core    // 运行时代码</span></span>
<span class="line"><span style="color:#e1e4e8;">    |- mars-cli     // CLI 代码</span></span>
<span class="line"><span style="color:#e1e4e8;">    |- mars-cli-template  // CLI Service 代码</span></span>
<span class="line"><span style="color:#e1e4e8;">    |- mars-api     // 适配 H5 的 API 代码</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">docs                // 文档目录</span></span>
<span class="line"><span style="color:#24292e;">packsges</span></span>
<span class="line"><span style="color:#24292e;">    |- mars-build   // 编译相关代码</span></span>
<span class="line"><span style="color:#24292e;">    |- mars-core    // 运行时代码</span></span>
<span class="line"><span style="color:#24292e;">    |- mars-cli     // CLI 代码</span></span>
<span class="line"><span style="color:#24292e;">    |- mars-cli-template  // CLI Service 代码</span></span>
<span class="line"><span style="color:#24292e;">    |- mars-api     // 适配 H5 的 API 代码</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="模版" tabindex="-1">模版 <a class="header-anchor" href="#模版" aria-label="Permalink to &quot;模版&quot;">​</a></h2><p>如果我们对比小程序和Vue模版，会发现他们与html语法是十分相似的。区别只在于标签上属性值的写法，相互之间通过编译是可以转化的。我们可以在编译阶段由Vue模版编译到小程序模版。</p><h2 id="逻辑" tabindex="-1">逻辑 <a class="header-anchor" href="#逻辑" aria-label="Permalink to &quot;逻辑&quot;">​</a></h2><p>逻辑部分，小程序与Vue在书写方式上有很大差异，他们的逻辑代码在各自的运行时中执行。并且逻辑部分用户书写的灵活度是很大的，没有办法通过编译将Vue的逻辑编译成小程序的逻辑去执行。那该怎么办呢，我们不如换一种思路。Vue运行时和Vue组件的逻辑在生产中都是以JS代码执行的，在小程序提供的环境中是可以执行的。我们可以让Vue运行时也可以在小程序中执行，这样开发者编写的Vue逻辑代码也可以在小程序中执行了。</p><h2 id="数据" tabindex="-1">数据 <a class="header-anchor" href="#数据" aria-label="Permalink to &quot;数据&quot;">​</a></h2><p>数据部分是最简单的，因为数据是以JS对象的形式存在的，在小程序和Vue中是相同的。</p><p>通过对视图、逻辑和数据这三个部分的分析，我们可以使用以下思路来使用Vue开发小程序。</p><p>首先将Vue template部分编译成小程序的模版，之后在小程序逻辑部分运行整个Vue的运行时，以及开发者编写的逻辑代码。最后Vue数据发生变化时同步给小程序，触发视图刷新。</p><p><img src="`+i+'" alt=""></p><p>我们需要在编辑阶段产出 .wxml、.css、.js以及.json文件，在template部分需要将v-bind等语法转换成小程序使用的格式。样式内容则可以直接提取出来作为css文件。我们会在Vue中规定一个字段作为配置，这部分配置会提取出来作为.json文件。</p>',26),m=[c];function d(u,h,b,_,g,V){return s(),e("div",null,m)}const y=a(o,[["render",d]]);export{k as __pageData,y as default};
