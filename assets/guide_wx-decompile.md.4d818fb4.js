import{_ as s,c as a,o as n,N as p}from"./chunks/framework.e907cce2.js";const e="/miniprogram/wx/3.png",l="/miniprogram/wx/4.png",o="/miniprogram/wx/5.png",t="/miniprogram/wx/6.png",r="/miniprogram/wx/7.png",c="/miniprogram/wx/8.png",i="/miniprogram/wx/9.png",h=JSON.parse('{"title":"反编译小程序","description":"","frontmatter":{},"headers":[],"relativePath":"guide/wx-decompile.md","lastUpdated":1676645588000}'),m={name:"guide/wx-decompile.md"},D=p('<h1 id="反编译小程序" tabindex="-1">反编译小程序 <a class="header-anchor" href="#反编译小程序" aria-hidden="true">#</a></h1><p>我们首先打开微信开发者工具，开发一个工程，然后点击自动真机调试，选择启动PC端自动真机调试 <img src="'+e+'" alt=""></p><p>然后就会在本地电脑中微信打开小程序，这时候找到 C:\\Users\\用户名\\Documents\\WeChat Files\\Applet 下可以看到新增的以小程序id为目录名的目录。 <img src="'+l+'" alt=""></p><p>打开进去之后会找到 <strong>APP</strong>.wxapkg 文件，这个就是小程序包。</p><p>然后使用<a href="https://github.com/codeteenager/WxAppUnpacker-1" target="_blank" rel="noreferrer">https://github.com/codeteenager/WxAppUnpacker-1</a>工具对其进行解压。</p><p><img src="'+o+'" alt=""></p><ul><li>app-service.js:小程序工程中所有 JS 文件的汇总，已被混淆；</li><li>app-config.json: 小程序工程 app.json 以及各个页面的 JSON 配置文件汇总，可直接查看；</li><li>page-frame.html: 所有页面的 .wxml 和 app.wxss 样式文件的汇总，可读性差，需要还原；</li><li>*.html: 包含每个页面对应的 .wxss 信息，可读性较好；</li><li>资源文件: 各类图片、音频等资源文件；</li></ul><p>打开微信开发者工具的源代码，他是基于 NW.js运行的，找到package.nw，在源码中有一个 vendor 文件夹是值得注意的，通过它可以快速新建一个示例项目，同时里面有一个十分重要的 2.17.0.wxvpkg 包，它是微信小程序的基础库。</p><p><img src="'+t+'" alt=""></p><p>然后打开vscode搜索unwxvpkg插件并下载，下载完之后右键包文件unpack wxvpkg即可解压。</p><p><img src="'+r+`" alt=""></p><p>我们也可以使用<a href="https://github.com/codeteenager/wxappUnpacker-2" target="_blank" rel="noreferrer">wxappUnpacker</a>来解包，我们clone一下wxappUnpacker项目到本地，并且拷贝需要解包的基础库到目录中，之后安装项目依赖，依赖安装完成之后执行命令。</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">node</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">./wuWxapkg.js</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">2.17.3.wxvpkg</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>执行完命令后项目中就多了一个dist文件夹,目录中的WAWebview.js和WAService.js分别为渲染层底层基础库和逻辑层底层基础库。我们打开WAWebview.js文件看一下：</p><p><img src="`+c+`" alt=""></p><p>可以看到代码是压缩过后的。这样的压缩过的代码是难以分析的，所以我们需要美化一下，可以看到package.json中有几条script命令：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">scripts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">: </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">beautify</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">js-beautify</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">beautifyWAWebview</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">js-beautify ./dist/WAWebview.js -r</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">beautifyAppService</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">js-beautify ./dist/WAService.js -r</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">},</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>这里我们执行一下:</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">beautifyWAWebview</span></span>
<span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">beautifyAppService</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>把我们要分析的核心基础库文件都美化一下。再打开文件我们就可以看到美化之后的代码了：</p><p><img src="`+i+'" alt=""></p>',21),u=[D];function d(y,g,F,b,C,_){return n(),a("div",null,u)}const w=s(m,[["render",d]]);export{h as __pageData,w as default};
